type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    import java.io.IOException;
    import java.util.Scanner;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
            Battleship bs = new Battleship();

            bs.playGame();
        }
    }

    class Battleship {

        private char[][] grid;

        // for handling user input
        private char firstAlpha;
        private char secondAlpha;
        private int firstNumber;
        private int secondNumber;

        Battleship() {

            grid = new char[10][10];

            for (int i = 0; i < 10; i++) {
                for (int j = 0; j < 10; j++) {
                    grid[i][j] = '~';
                }
            }
        }

        void playGame() {

            printGrid();
            initializeAircraftCarrier();
            printGrid();
            initializeBattleship();
            printGrid();
            initializeSubmarine();
            printGrid();
            initializeCruiser();
            printGrid();
            initializeDestroyer();
            printGrid();

            System.out.println("The game starts!\n");
            printGrid();
            takeAShot();
        }

        private void printGrid() {

            for (int i = -1; i < 10; i++) {

                if (i == -1) {

                    System.out.print(" ");
                    for (int k = 1; k <= 10; k++) {
                        System.out.printf(" " + k);
                    }
                } else {

                    for (int j = -1; j < 10; j++) {

                        if (j == -1) {
                            System.out.print((char) ('A' + i));
                        } else {
                            System.out.print(" " + grid[i][j]);
                        }
                    }
                }
                System.out.println();
            }
            System.out.println();
        }

        private void initializeAircraftCarrier() {

            System.out.println("Enter the coordinates of the Aircraft Carrier (5 cells):\n");

            takePosition("Aircraft Carrier",5);
            System.out.println();
        }

        private void initializeBattleship() {

            System.out.println("Enter the coordinates of the Battleship (4 cells):\n");

            takePosition("Battleship", 4);
            System.out.println();
        }

        private void initializeSubmarine() {

            System.out.println("Enter the coordinates of the Submarine (3 cells):\n");

            takePosition("Submarine", 3);
            System.out.println();
        }

        private void initializeCruiser() {

            System.out.println("Enter the coordinates of the Cruiser (3 cells):\n");

            takePosition("Cruiser", 3);
            System.out.println();
        }

        private void initializeDestroyer() {

            System.out.println("Enter the coordinates of the Destroyer (2 cells):\n");

            takePosition("Destroyer", 2);
            System.out.println();
        }

        private void takePosition(String nameOfCraft, int lengthOfCell) {

            Scanner scanner = new Scanner(System.in);

            while (true) {

                String firstCoordinate = scanner.next();
                String secondCoordinate = scanner.next();

                this.firstAlpha = firstCoordinate.charAt(0);
                this.secondAlpha = secondCoordinate.charAt(0);

                this.firstNumber = Integer.parseInt(firstCoordinate.substring(1));
                this.secondNumber = Integer.parseInt(secondCoordinate.substring(1));

                if (firstAlpha < 'A' || firstAlpha > 'J' ||
                        secondAlpha < 'A' || secondAlpha > 'J' ||
                        firstNumber < 1 || firstNumber > 10 ||
                        secondNumber < 1 || secondNumber > 10) {

                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
                } else if ((firstAlpha != secondAlpha) && (firstNumber != secondNumber)) {

                    System.out.println("\nError! Wrong ship location! Try again:\n");
                } else if (Math.abs(firstAlpha - secondAlpha) != lengthOfCell - 1 && Math.abs(firstNumber - secondNumber) != lengthOfCell - 1) {

                    System.out.println("\nError! Wrong length of the " + nameOfCraft + "! Try again:\n");
                } else if (!positionIsVacant(firstAlpha, secondAlpha, firstNumber, secondNumber)) {

                    System.out.println("\nError! You placed it too close to another one. Try again:\n");
                }
                else {

                    fillGrid(firstAlpha, secondAlpha, firstNumber, secondNumber);
                    break;
                }
            }
        }

        private boolean positionIsVacant(char firstAlpha, char secondAlpha, int firstNumber, int secondNumber) {

            if (firstAlpha == secondAlpha && firstNumber != secondNumber) {

                if (firstNumber < secondNumber) {

                    for (int i = firstNumber - 1; i < secondNumber; i++) {

                        if (grid[firstAlpha - 'A'][i] != '~') {
                            return false;
                        }
                    }

                    if (firstNumber == 1) {

                        if (grid[firstAlpha - 'A'][secondNumber] != '~') {
                            return false;
                        }
                    } else if (secondNumber == 10) {

                        if (grid[firstAlpha - 'A'][firstNumber - 1] != '~') {
                            return false;
                        }
                    } else {

                        if (grid[firstAlpha - 'A'][firstNumber - 2] != '~' || grid[firstAlpha - 'A'][secondNumber] != '~') {
                            return false;
                        }
                    }

                    if (firstAlpha == 'A') {

                        for (int i = firstNumber - 1; i < secondNumber; i++) {

                            if (grid[1][i] != '~') {
                                return false;
                            }
                        }
                    } else if (firstAlpha == 'J') {

                        for (int i = firstNumber - 1; i < secondNumber; i++) {

                            if (grid[firstAlpha - 'A' - 1][i] != '~') {
                                return false;
                            }
                        }
                    } else {

                        for (int i = firstNumber - 1; i < secondNumber; i++) {

                            if (grid[firstAlpha - 'A' - 1][i] != '~' || grid[firstAlpha - 'A' + 1][i] != '~') {
                                return false;
                            }
                        }
                    }
                } else if (secondNumber < firstNumber) {

                    for (int i = secondNumber - 1; i < firstNumber; i++) {

                        if (grid[firstAlpha - 'A'][i] != '~') {
                            return false;
                        }
                    }

                    if (secondNumber == 1) {

                        if (grid[firstAlpha - 'A'][firstNumber] != '~') {
                            return false;
                        }
                    } else if (firstNumber == 10) {

                        if (grid[firstAlpha - 'A'][secondNumber - 1] != '~') {
                            return false;
                        }
                    } else {

                        if (grid[firstAlpha - 'A'][secondNumber - 2] != '~' || grid[firstAlpha - 'A'][firstNumber] != '~') {
                            return false;
                        }
                    }

                    if (firstAlpha == 'A') {

                        for (int i = secondNumber - 1; i < firstNumber; i++) {

                            if (grid[1][i] != '~') {
                                return false;
                            }
                        }
                    } else if (firstAlpha == 'J') {

                        for (int i = secondNumber - 1; i < firstNumber; i++) {

                            if (grid[firstAlpha - 'A' - 1][i] != '~') {
                                return false;
                            }
                        }
                    } else {

                        for (int i = secondNumber - 1; i < firstNumber; i++) {

                            if (grid[firstAlpha - 'A' - 1][i] != '~' || grid[firstAlpha - 'A' + 1][i] != '~') {
                                return false;
                            }
                        }
                    }
                }
            } else if (firstAlpha != secondAlpha && firstNumber == secondNumber) {

                if (firstAlpha < secondAlpha) {

                    for (int i = firstAlpha - 'A'; i <= secondAlpha - 'A'; i++) {

                        if (grid[i][firstNumber - 1] != '~') {
                            return false;
                        }
                    }

                    if (firstAlpha == 'A') {

                        if (grid[secondAlpha - 'A' + 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    } else if (secondAlpha == 'J') {

                        if (grid[firstAlpha - 'A' - 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    } else {

                        if (grid[secondAlpha - 'A' + 1][firstNumber - 1] != '~' || grid[firstAlpha - 'A' - 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    }

                    if (firstNumber == 1) {

                        for (int i = firstAlpha - 'A'; i <= secondAlpha - 'A'; i++) {

                            if (grid[i][firstNumber] != '~') {
                                return false;
                            }
                        }
                    } else if (firstNumber == 10) {

                        for (int i = firstAlpha - 'A'; i <= secondAlpha - 'A'; i++) {

                            if (grid[i][firstNumber - 2] != '~') {
                                return false;
                            }
                        }
                    } else {

                        for (int i = firstAlpha - 'A'; i <= secondAlpha - 'A'; i++) {

                            if (grid[i][firstNumber] != '~' || grid[i][firstNumber - 2] != '~') {
                                return false;
                            }
                        }
                    }
                } else if (secondAlpha < firstAlpha) {

                    for (int i = secondAlpha - 'A'; i <= firstAlpha - 'A'; i++) {

                        if (grid[i][firstNumber - 1] != '~') {
                            return false;
                        }
                    }

                    if (secondAlpha == 'A') {

                        if (grid[firstAlpha - 'A' + 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    } else if (firstAlpha == 'J') {

                        if (grid[secondAlpha - 'A' - 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    } else {

                        if (grid[firstAlpha - 'A' + 1][firstNumber - 1] != '~' || grid[secondAlpha - 'A' - 1][firstNumber - 1] != '~') {
                            return false;
                        }
                    }

                    if (firstNumber == 1) {

                        for (int i = secondAlpha - 'A'; i <= firstAlpha - 'A'; i++) {

                            if (grid[i][firstNumber] != '~') {
                                return false;
                            }
                        }
                    } else if (firstNumber == 10) {

                        for (int i = secondAlpha - 'A'; i <= firstAlpha - 'A'; i++) {

                            if (grid[i][firstNumber - 2] != '~') {
                                return false;
                            }
                        }
                    } else {

                        for (int i = secondAlpha - 'A'; i <= firstAlpha - 'A'; i++) {

                            if (grid[i][firstNumber] != '~' || grid[i][firstNumber - 2] != '~') {
                                return false;
                            }
                        }
                    }
                }
            }
            return true;
        }

        private void fillGrid(char firstAlpha, char secondAlpha, int firstNumber, int secondNumber) {

            if (firstAlpha == secondAlpha) {

                if (firstNumber < secondNumber) {

                    for (int i = firstNumber - 1; i < secondNumber; i++) {

                        grid[firstAlpha - 'A'][i] = 'O';
                    }
                } else if (secondNumber < firstNumber) {

                    for (int i = secondNumber - 1; i < firstNumber; i++) {

                        grid[firstAlpha - 'A'][i] = 'O';
                    }
                }
            } else if (firstNumber == secondNumber) {

                if (firstAlpha < secondAlpha) {

                    for (int i = firstAlpha - 'A'; i <= secondAlpha - 'A'; i++) {

                        grid[i][firstNumber - 1] = 'O';
                    }
                } else if (secondAlpha < firstAlpha) {

                    for (int i = secondAlpha - 'A'; i <= firstAlpha - 'A'; i++) {

                        grid[i][firstNumber - 1] = 'O';
                    }
                }
            }
        }

        private void takeAShot() {

            System.out.println("Take a shot!\n");

            Scanner sc = new Scanner(System.in);
            String res = "";

            while (true) {

                String coordinates = sc.next();

                char alpha = coordinates.charAt(0);
                int number = Integer.parseInt(coordinates.substring(1));

                if (alpha < 'A' || alpha > 'J' ||
                        number < 1 || number > 10) {

                    System.out.println("\nError! You entered the wrong coordinates! Try again:\n");
                } else {

                    if (grid[alpha - 'A'][number - 1] == 'O') {

                        grid[alpha - 'A'][number - 1] = 'X';
                        res += "You hit a ship!";
                    } else {
                        grid[alpha - 'A'][number - 1] = 'M';
                        res += "You missed!";
                    }
                    break;
                }
            }

            System.out.println();
            printGrid();
            System.out.println(res);
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Solved
record: 2
