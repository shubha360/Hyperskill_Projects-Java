type: edu
custom_name: stage5
files:
- name: src/converter/Main.java
  visible: true
  text: |
    package converter;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ConverterTest.java
  visible: false
  text: |
    import com.google.gson.*;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import org.w3c.dom.*;

    import javax.xml.parsers.*;
    import java.io.*;

    import java.math.BigDecimal;
    import java.util.*;

    class Clue {
        String answer;
        String input;

        Clue(String answer, String input) {
            this.answer = answer.strip();
            this.input = input.strip();
        }
    }

    public class ConverterTest extends StageTest<Clue> {

        static Map<String, String> allTests;

        static {
            allTests = new LinkedHashMap<>();

            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-00-00\"\n" +
                    "        },\n" +
                    "        \"amount\": null\n" +
                    "    }\n" +
                    "}",


                "<transaction>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <amount />\n" +
                    "</transaction>"
            );


            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-00-00\"\n" +
                    "        },\n" +
                    "        \"amount\": null\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753322</id>\n" +
                    "        <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "        <amount />\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );



            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-000\"\n" +
                    "        },\n" +
                    "        \"empty1\": null,\n" +
                    "        \"empty2\": { },\n" +
                    "        \"empty3\": \"\",\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753322</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11></inner11>\n" +
                    "        <inner12>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner12>notnull</inner12>\n" +
                    "        </inner12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );



            allTests.put(
                "<root>\n" +
                    "    <id>6753322</id>\n" +
                    "    <number region=\"Russia\">8-900-000-00-00</number>\n" +
                    "    <nonattr1 />\n" +
                    "    <nonattr2></nonattr2>\n" +
                    "    <nonattr3>text</nonattr3>\n" +
                    "    <attr1 id=\"1\" />\n" +
                    "    <attr2 id=\"2\"></attr2>\n" +
                    "    <attr3 id=\"3\">text</attr3>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</root>",


                "{\n" +
                    "    \"root\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-00-00\"\n" +
                    "        },\n" +
                    "        \"nonattr1\": null,\n" +
                    "        \"nonattr2\": \"\",\n" +
                    "        \"nonattr3\": \"text\",\n" +
                    "        \"attr1\": {\n" +
                    "            \"@id\": \"1\",\n" +
                    "            \"#attr1\": null\n" +
                    "        },\n" +
                    "        \"attr2\": {\n" +
                    "            \"@id\": \"2\",\n" +
                    "            \"#attr2\": \"\"\n" +
                    "        },\n" +
                    "        \"attr3\": {\n" +
                    "            \"@id\": \"3\",\n" +
                    "            \"#attr3\": \"text\"\n" +
                    "        },\n" +
                    "        \"email\": {\n" +
                    "            \"to\": \"to_example@gmail.com\",\n" +
                    "            \"from\": \"from_example@gmail.com\",\n" +
                    "            \"subject\": \"Project discussion\",\n" +
                    "            \"body\": {\n" +
                    "                \"@font\": \"Verdana\",\n" +
                    "                \"#body\": \"Body message\"\n" +
                    "            },\n" +
                    "            \"date\": {\n" +
                    "                \"@day\": \"12\",\n" +
                    "                \"@month\": \"12\",\n" +
                    "                \"@year\": \"2018\",\n" +
                    "                \"#date\": null\n" +
                    "            }\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );



            allTests.put(
                "{\n" +
                    "    \"elem1\": {\n" +
                    "        \"@attr1\": \"val1\",\n" +
                    "        \"@attr2\": \"val2\",\n" +
                    "        \"#elem1\": {\n" +
                    "            \"elem2\": {\n" +
                    "                \"@attr3\": \"val3\",\n" +
                    "                \"@attr4\": \"val4\",\n" +
                    "                \"#elem2\": \"Value1\"\n" +
                    "            },\n" +
                    "            \"elem3\": {\n" +
                    "                \"@attr5\": \"val5\",\n" +
                    "                \"@attr6\": \"val6\",\n" +
                    "                \"#elem3\": \"Value2\"\n" +
                    "            }\n" +
                    "        }\n" +
                    "    }\n" +
                    "}",


                "<elem1 attr1=\"val1\" attr2=\"val2\">\n" +
                    "    <elem2 attr3=\"val3\" attr4=\"val4\">Value1</elem2>\n" +
                    "    <elem3 attr5=\"val5\" attr6=\"val6\">Value2</elem3>\n" +
                    "</elem1>"
            );



            allTests.put(
                "<elem1 attr1=\"val1\" attr2=\"val2\">\n" +
                    "    <elem2 attr3=\"val3\" attr4=\"val4\">Value1</elem2>\n" +
                    "    <elem3 attr5=\"val5\" attr6=\"val6\">Value2</elem3>\n" +
                    "</elem1>",


                "{\n" +
                    "    \"elem1\": {\n" +
                    "        \"@attr1\": \"val1\",\n" +
                    "        \"@attr2\": \"val2\",\n" +
                    "        \"#elem1\": {\n" +
                    "            \"elem2\": {\n" +
                    "                \"@attr3\": \"val3\",\n" +
                    "                \"@attr4\": \"val4\",\n" +
                    "                \"#elem2\": \"Value1\"\n" +
                    "            },\n" +
                    "            \"elem3\": {\n" +
                    "                \"@attr5\": \"val5\",\n" +
                    "                \"@attr6\": \"val6\",\n" +
                    "                \"#elem3\": \"Value2\"\n" +
                    "            }\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );


            allTests.put(
                "{\"transaction\":{\"id\":\"6753322\",\"number\":{\"@region\":\"Russia\",\"#number\":\"8-900-000-000\"},\"empty1\":null,\"empty2\":{},\"empty3\":\"\",\"inner1\":{\"inner2\":{\"inner3\":{\"key1\":\"value1\",\"key2\":\"value2\"}}},\"inner4\":{\"@\":123,\"#inner4\":\"value3\"},\"inner5\":{\"@attr1\":123.456,\"#inner4\":\"value4\"},\"inner6\":{\"@attr2\":789.321,\"#inner6\":\"value5\"},\"inner7\":{\"#inner7\":\"value6\"},\"inner8\":{\"@attr3\":\"value7\"},\"inner9\":{\"@attr4\":\"value8\",\"#inner9\":\"value9\",\"something\":\"value10\"},\"inner10\":{\"@attr5\":null,\"#inner10\":null},\"inner11\":{\"@\":null,\"#\":null},\"inner12\":{\"@somekey\":\"attrvalue\",\"#inner12\":null,\"somekey\":\"keyvalue\",\"inner12\":\"notnull\"},\"\":{\"#\":null,\"secret\":\"this won't be converted\"}},\"meta\":{\"version\":0.01}}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753322</id>\n" +
                    "        <number region=\"Russia\">8-900-000-000</number>\n" +
                    "        <empty1 />\n" +
                    "        <empty2></empty2>\n" +
                    "        <empty3></empty3>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11></inner11>\n" +
                    "        <inner12>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner12>notnull</inner12>\n" +
                    "        </inner12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );


            allTests.put(
                "<root><id>6753322</id><number region=\"Russia\">8-900-000-00-00</number><nonattr1 /><nonattr2></nonattr2><nonattr3>text</nonattr3><attr1 id=\"1\" /><attr2 id=\"2\"></attr2><attr3 id=\"3\">text</attr3><email><to>to_example@gmail.com</to><from>from_example@gmail.com</from><subject>Project discussion</subject><body font=\"Verdana\">Body message</body><date day=\"12\" month=\"12\" year=\"2018\"/></email></root>",


                "{\n" +
                    "    \"root\": {\n" +
                    "        \"id\": \"6753322\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-000-00-00\"\n" +
                    "        },\n" +
                    "        \"nonattr1\": null,\n" +
                    "        \"nonattr2\": \"\",\n" +
                    "        \"nonattr3\": \"text\",\n" +
                    "        \"attr1\": {\n" +
                    "            \"@id\": \"1\",\n" +
                    "            \"#attr1\": null\n" +
                    "        },\n" +
                    "        \"attr2\": {\n" +
                    "            \"@id\": \"2\",\n" +
                    "            \"#attr2\": \"\"\n" +
                    "        },\n" +
                    "        \"attr3\": {\n" +
                    "            \"@id\": \"3\",\n" +
                    "            \"#attr3\": \"text\"\n" +
                    "        },\n" +
                    "        \"email\": {\n" +
                    "            \"to\": \"to_example@gmail.com\",\n" +
                    "            \"from\": \"from_example@gmail.com\",\n" +
                    "            \"subject\": \"Project discussion\",\n" +
                    "            \"body\": {\n" +
                    "                \"@font\": \"Verdana\",\n" +
                    "                \"#body\": \"Body message\"\n" +
                    "            },\n" +
                    "            \"date\": {\n" +
                    "                \"@day\": \"12\",\n" +
                    "                \"@month\": \"12\",\n" +
                    "                \"@year\": \"2018\",\n" +
                    "                \"#date\": null\n" +
                    "            }\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );






            allTests.put(
                "{\n" +
                    "    \"transaction\": {\n" +
                    "        \"id\": \"6753333\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-777-000\"\n" +
                    "        },\n" +
                    "        \"inner1\": {\n" +
                    "            \"inner2\": {\n" +
                    "                \"inner3\": {\n" +
                    "                    \"key1\": \"value1\",\n" +
                    "                    \"key2\": \"value2\"\n" +
                    "                }\n" +
                    "            }\n" +
                    "        },\n" +
                    "        \"inner4\": {\n" +
                    "            \"@\": 123,\n" +
                    "            \"#inner4\": \"value3\"\n" +
                    "        },\n" +
                    "        \"inner5\": {\n" +
                    "            \"@attr1\": 123.456,\n" +
                    "            \"#inner4\": \"value4\"\n" +
                    "        },\n" +
                    "        \"inner6\": {\n" +
                    "            \"@attr2\": 789.321,\n" +
                    "            \"#inner6\": \"value5\"\n" +
                    "        },\n" +
                    "        \"inner7\": {\n" +
                    "            \"#inner7\": \"value6\"\n" +
                    "        },\n" +
                    "        \"inner8\": {\n" +
                    "            \"@attr3\": \"value7\"\n" +
                    "        },\n" +
                    "        \"inner9\": {\n" +
                    "            \"@attr4\": \"value8\",\n" +
                    "            \"#inner9\": \"value9\",\n" +
                    "            \"something\": \"value10\"\n" +
                    "        },\n" +
                    "        \"inner10\": {\n" +
                    "            \"@attr5\": null,\n" +
                    "            \"#inner10\": null\n" +
                    "        },\n" +
                    "        \"inner11\": {\n" +
                    "            \"@\": null,\n" +
                    "            \"#\": null\n" +
                    "        },\n" +
                    "        \"inner12\": {\n" +
                    "            \"@somekey\": \"attrvalue\",\n" +
                    "            \"#inner12\": null,\n" +
                    "            \"somekey\": \"keyvalue\",\n" +
                    "            \"inner12\": \"notnull\"\n" +
                    "        },\n" +
                    "        \"\": {\n" +
                    "            \"#\": null,\n" +
                    "            \"secret\": \"this won't be converted\"\n" +
                    "        }\n" +
                    "    },\n" +
                    "    \"meta\": {\n" +
                    "        \"version\": 0.01\n" +
                    "    }\n" +
                    "}",


                "<root>\n" +
                    "    <transaction>\n" +
                    "        <id>6753333</id>\n" +
                    "        <number region=\"Russia\">8-900-777-000</number>\n" +
                    "        <inner1>\n" +
                    "            <inner2>\n" +
                    "                <inner3>\n" +
                    "                    <key1>value1</key1>\n" +
                    "                    <key2>value2</key2>\n" +
                    "                </inner3>\n" +
                    "            </inner2>\n" +
                    "        </inner1>\n" +
                    "        <inner4>\n" +
                    "            <inner4>value3</inner4>\n" +
                    "        </inner4>\n" +
                    "        <inner5>\n" +
                    "            <attr1>123.456</attr1>\n" +
                    "            <inner4>value4</inner4>\n" +
                    "        </inner5>\n" +
                    "        <inner6 attr2=\"789.321\">value5</inner6>\n" +
                    "        <inner7>value6</inner7>\n" +
                    "        <inner8>\n" +
                    "            <attr3>value7</attr3>\n" +
                    "        </inner8>\n" +
                    "        <inner9>\n" +
                    "            <attr4>value8</attr4>\n" +
                    "            <inner9>value9</inner9>\n" +
                    "            <something>value10</something>\n" +
                    "        </inner9>\n" +
                    "        <inner10 attr5=\"\" />\n" +
                    "        <inner11></inner11>\n" +
                    "        <inner12>\n" +
                    "            <somekey>keyvalue</somekey>\n" +
                    "            <inner12>notnull</inner12>\n" +
                    "        </inner12>\n" +
                    "    </transaction>\n" +
                    "    <meta>\n" +
                    "        <version>0.01</version>\n" +
                    "    </meta>\n" +
                    "</root>"
            );



            allTests.put(
                "<root>\n" +
                    "    <id>6753333</id>\n" +
                    "    <number region=\"Russia\">8-900-888-00-00</number>\n" +
                    "    <attr1 id=\"1\" />\n" +
                    "    <attr2 id=\"2\"></attr2>\n" +
                    "    <attr3 id=\"3\">text</attr3>\n" +
                    "    <email>\n" +
                    "        <to>to_example@gmail.com</to>\n" +
                    "        <from>from_example@gmail.com</from>\n" +
                    "        <subject>Project discussion</subject>\n" +
                    "        <body font=\"Verdana\">Body message</body>\n" +
                    "        <date day=\"12\" month=\"12\" year=\"2018\"/>\n" +
                    "    </email>\n" +
                    "</root>",


                "{\n" +
                    "    \"root\": {\n" +
                    "        \"id\": \"6753333\",\n" +
                    "        \"number\": {\n" +
                    "            \"@region\": \"Russia\",\n" +
                    "            \"#number\": \"8-900-888-00-00\"\n" +
                    "        },\n" +
                    "        \"attr1\": {\n" +
                    "            \"@id\": \"1\",\n" +
                    "            \"#attr1\": null\n" +
                    "        },\n" +
                    "        \"attr2\": {\n" +
                    "            \"@id\": \"2\",\n" +
                    "            \"#attr2\": \"\"\n" +
                    "        },\n" +
                    "        \"attr3\": {\n" +
                    "            \"@id\": \"3\",\n" +
                    "            \"#attr3\": \"text\"\n" +
                    "        },\n" +
                    "        \"email\": {\n" +
                    "            \"to\": \"to_example@gmail.com\",\n" +
                    "            \"from\": \"from_example@gmail.com\",\n" +
                    "            \"subject\": \"Project discussion\",\n" +
                    "            \"body\": {\n" +
                    "                \"@font\": \"Verdana\",\n" +
                    "                \"#body\": \"Body message\"\n" +
                    "            },\n" +
                    "            \"date\": {\n" +
                    "                \"@day\": \"12\",\n" +
                    "                \"@month\": \"12\",\n" +
                    "                \"@year\": \"2018\",\n" +
                    "                \"#date\": null\n" +
                    "            }\n" +
                    "        }\n" +
                    "    }\n" +
                    "}"
            );

        }

        @Override
        public List<TestCase<Clue>> generate() {

            List<TestCase<Clue>> tests = new ArrayList<>();

            for (String input : allTests.keySet()) {
                String answer = allTests.get(input);

                TestCase<Clue> test = new TestCase<>();
                test.addFile("test.txt", input);
                test.setAttach(new Clue(answer, input));

                tests.add(test);
            }

            return tests;
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            String user = reply.strip();
            String answer = clue.answer.strip();

            if (user.length() == 0) {
                return new CheckResult(false,
                    "Your output is empty line.");
            }

            CheckResult result;

            if (user.charAt(0) != '<' && user.charAt(0) != '{') {
                return new CheckResult(false,
                    "Your first symbol is wrong - " +
                        " should be '{' or '<'");
            }

            try {
                if (user.charAt(0) == '<' && answer.charAt(0) == '<') {
                    result = isEqualXMLs(user, answer);
                } else if (user.charAt(0) == '{' && answer.charAt(0) == '{') {
                    result = isEqualJSONs(user, answer);
                } else {
                    return new CheckResult(false,
                        "Your first symbol is wrong - " +
                            "'{' instead of '<' or vice versa" + "\n\n" + user + "\n\n" + answer);
                }
            } catch (Exception ex) {
                return new CheckResult(false,
                    "Can't check the output - invalid XML or JSON");
            }

            return result;
        }

        public static Element stringToXML(String str) throws Exception {
            DocumentBuilderFactory factory =
                DocumentBuilderFactory.newInstance();
            DocumentBuilder builder = factory.newDocumentBuilder();

            ByteArrayInputStream input = new ByteArrayInputStream(
                str.getBytes("UTF-8"));

            Document document = builder.parse(input);

            return document.getDocumentElement();
        }


        public static CheckResult isEqualXMLs(String s1, String s2) throws Exception {
            Element elem1 = stringToXML(s1);
            Element elem2 = stringToXML(s2);

            CheckResult result = isEqualXMLElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualXMLElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualXMLElements(Element e1, Element e2) {
            // test name
            if (!e1.getNodeName().equals(e2.getNodeName())) {
                return new CheckResult(false,
                    "In XML: element name is incorrect");
            }

            // test attributes
            NamedNodeMap attributes = e1.getAttributes();
            for (int i = 0; i < attributes.getLength(); i++) {
                Attr attr = (Attr) attributes.item(i);

                String name = attr.getName();

                if (!e2.hasAttribute(name)) {
                    return new CheckResult(false,
                        "In XML: element doesn't have " +
                            "an attribute or has an excess attribute");
                }

                if (!attr.getValue().equals(e2.getAttribute(name))) {
                    return new CheckResult(false,
                        "In XML: element has an attribute " +
                            "but their values don't match");
                }
            }

            // test chidls
            if (e1.hasChildNodes() != e2.hasChildNodes()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            if (!e1.hasChildNodes()) {
                return CheckResult.correct();
            }

            NodeList childs1 = e1.getChildNodes();
            NodeList childs2 = e2.getChildNodes();

            List<Element> filteredChilds1 = new ArrayList<>();
            List<Element> filteredChilds2 = new ArrayList<>();

            for (int i = 0; i < childs1.getLength(); i++) {
                Object item = childs1.item(i);
                if (item instanceof Element) {
                    filteredChilds1.add((Element) childs1.item(i));
                }
            }

            for (int i = 0; i < childs2.getLength(); i++) {
                Object item = childs2.item(i);
                if (item instanceof Element) {
                    filteredChilds2.add((Element) childs2.item(i));
                }
            }

            if (filteredChilds1.size() != filteredChilds2.size()) {
                return new CheckResult(false,
                    "In XML: element doesn't have needed " +
                        "child nodes or has excess child nodes");
            }

            for (int i = 0; i < filteredChilds1.size(); i++) {

                Element elem1 = filteredChilds1.get(i);
                Element elem2 = filteredChilds2.get(i);

                CheckResult result = isEqualXMLElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static JsonElement stringToJSON(String str) {
            return new JsonParser().parse(str);
        }


        public static CheckResult isEqualJSONs(String s1, String s2) {
            JsonElement elem1 = stringToJSON(s1);
            JsonElement elem2 = stringToJSON(s2);

            CheckResult result = isEqualJSONElements(elem1, elem2);

            if (!result.isCorrect()) {
                return result;
            } else {
                return isEqualJSONElements(elem2, elem1);
            }
        }

        public static CheckResult isEqualJSONElements(JsonElement e1, JsonElement e2) {

            // check for null
            if (e1.isJsonNull() != e2.isJsonNull()) {
                return new CheckResult(false,
                    "In JSON: expected null but found something else " +
                        "(or vice versa)");
            }
            if (e1.isJsonNull()) {
                return CheckResult.correct();
            }


            // check for primitives
            if (e1.isJsonPrimitive() != e2.isJsonPrimitive()) {
                // number and boolean are also may be expected but
                // after converting from XML there can be only strings
                return new CheckResult(false,
                    "In JSON: expected string " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonPrimitive()) {
                JsonPrimitive prim1 = e1.getAsJsonPrimitive();
                JsonPrimitive prim2 = e2.getAsJsonPrimitive();
                return compareJSONPrimitives(prim1, prim2);
            }


            // check for arrays
            if (e1.isJsonArray() != e2.isJsonArray()) {
                return new CheckResult(false,
                    "In JSON: expected array " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonArray()) {
                JsonArray arr1 = e1.getAsJsonArray();
                JsonArray arr2 = e2.getAsJsonArray();
                return compareJSONArrays(arr1, arr2);
            }


            // check for objects
            if (e1.isJsonObject() != e2.isJsonObject()) {
                return new CheckResult(false,
                    "In JSON: expected object " +
                        "but found something else (or vice versa)");
            }
            if (e1.isJsonObject()) {
                JsonObject obj1 = e1.getAsJsonObject();
                JsonObject obj2 = e2.getAsJsonObject();
                return compareJSONObjects(obj1, obj2);
            }

            return CheckResult.correct();
        }


        public static CheckResult compareJSONPrimitives(JsonPrimitive prim1,
                                                        JsonPrimitive prim2) {

            if (prim1.isBoolean() && prim2.isBoolean()) {
                return new CheckResult(
                    prim1.getAsBoolean() == prim2.getAsBoolean(),
                    "In JSON: two boolean values don't match");
            }
            if (prim1.isNumber() && prim2.isNumber()) {
                BigDecimal num1 = prim1.getAsBigDecimal();
                BigDecimal num2 = prim2.getAsBigDecimal();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two number values don't match");
            }
            if (prim1.isString() && prim2.isString()) {
                String num1 = prim1.getAsString();
                String num2 = prim2.getAsString();
                return new CheckResult(num1.equals(num2),
                    "In JSON: two string values don't match");
            }


            if (prim1.isString() && prim2.isNumber() ||
                prim1.isNumber() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found number (or vice versa)");
            }
            if (prim1.isString() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isString()) {

                return new CheckResult(false,
                    "In JSON: expected string value but " +
                        "found boolean (or vice versa)");
            }
            if (prim1.isNumber() && prim2.isBoolean() ||
                prim1.isBoolean() && prim2.isNumber()) {

                return new CheckResult(false,
                    "In JSON: expected number value but " +
                        "found boolean (or vice versa)");
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONArrays(JsonArray arr1, JsonArray arr2) {
            if (arr1.size() != arr2.size()) {
                return new CheckResult(false,
                    "In JSON: array size is incorrect");
            }

            for (int i = 0; i < arr1.size(); i++) {
                JsonElement elem1 = arr1.get(i);
                JsonElement elem2 = arr2.get(i);

                CheckResult result = isEqualJSONElements(elem1, elem2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

        public static CheckResult compareJSONObjects(JsonObject obj1, JsonObject obj2) {

            for (String key : obj1.keySet()) {
                if (!obj2.has(key)) {
                    return new CheckResult(false,
                        "In JSON: object doesn't have " +
                            "needed key or has an excess key");
                }

                JsonElement value1 = obj1.get(key);
                JsonElement value2 = obj2.get(key);

                CheckResult result = isEqualJSONElements(value1, value2);
                if (!result.isCorrect()) {
                    return result;
                }
            }

            return CheckResult.correct();
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/61/stages/333/implement#comment
status: Unchecked
record: -1
