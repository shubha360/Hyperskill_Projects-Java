type: edu
custom_name: stage6
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: "package machine;\n\nimport java.util.Scanner;\n\npublic class CoffeeMachine\
    \ {\n    \n    final static Scanner sc = new Scanner(System.in);\n\n    static\
    \ int water = 400;\n    static int milk = 540;\n    static int beans = 120;\n\
    \    static int cups = 9;\n    static int money = 550;\n\n    public static void\
    \ main(String[] args) {\n\n        while (true) {\n\n            System.out.println(\"\
    Write action (buy, fill, take, remaining, exit):\");\n            String input\
    \ = sc.nextLine();\n            System.out.println();\n\n            switch (input)\
    \ {\n\n                case \"buy\":\n                    buy();\n           \
    \         break;\n\n                case \"fill\":\n                    fill();\n\
    \                    break;\n\n                case \"take\":\n              \
    \      take();\n                    break;\n\n                case \"remaining\"\
    :\n                    printMachineState();\n                    break;\n\n  \
    \              case \"exit\":\n                    return;\n            }\n  \
    \      }\n    }\n\n    public static void buy() {\n\n        System.out.println(\"\
    What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino, back - to main\
    \ menu:\");\n        String selection = sc.nextLine();\n\n        switch (selection)\
    \ {\n\n            case \"1\":\n\n                if (water < 250) {\n       \
    \             System.out.println(\"Sorry, not enough water!\\n\");\n         \
    \       } else if (beans < 16) {\n                    System.out.println(\"Sorry,\
    \ not enough beans!\\n\");\n                } else if (cups < 1) {\n         \
    \           System.out.println(\"Sorry, not enough disposable cups!\\n\");\n \
    \               } else {\n\n                    System.out.println(\"I have enough\
    \ resources, making you a coffee!\\n\");\n                    water -= 250;\n\
    \                    beans -= 16;\n                    cups--;\n             \
    \       money += 4;\n                }\n                break;\n\n           \
    \ case \"2\":\n\n                if (water < 350) {\n                    System.out.println(\"\
    Sorry, not enough water!\\n\");\n                } else if (milk < 75) {\n   \
    \                 System.out.println(\"Sorry, not enough milk!\\n\");\n      \
    \          } else if (beans < 20) {\n                    System.out.println(\"\
    Sorry, not enough beans!\\n\");\n                } else if (cups < 1) {\n    \
    \                System.out.println(\"Sorry, not enough disposable cups!\\n\"\
    );\n                } else {\n\n                    System.out.println(\"I have\
    \ enough resources, making you a coffee!\\n\");\n                    water -=\
    \ 350;\n                    milk -= 75;\n                    beans -= 20;\n  \
    \                  cups--;\n                    money += 7;\n                }\n\
    \                break;\n\n            case \"3\":\n\n                if (water\
    \ < 200) {\n                    System.out.println(\"Sorry, not enough water!\\\
    n\");\n                } else if (milk < 100) {\n                    System.out.println(\"\
    Sorry, not enough milk!\\n\");\n                } else if (beans < 12) {\n   \
    \                 System.out.println(\"Sorry, not enough beans!\\n\");\n     \
    \           } else if (cups < 1) {\n                    System.out.println(\"\
    Sorry, not enough disposable cups!\\n\");\n                } else {\n\n      \
    \              System.out.println(\"I have enough resources, making you a coffee!\\\
    n\");\n                    water -= 200;\n                    milk -= 100;\n \
    \                   beans -= 12;\n                    cups--;\n              \
    \      money += 6;\n                }\n                break;\n\n            case\
    \ \"back\":\n                break;\n        }\n    }\n\n    public static void\
    \ fill() {\n\n        System.out.println(\"Write how many ml of water do you want\
    \ to add:\");\n        water += sc.nextInt();\n\n        System.out.println(\"\
    Write how many ml of milk do you want to add:\");\n        milk += sc.nextInt();\n\
    \n        System.out.println(\"Write how many grams of coffee beans do you want\
    \ to add:\");\n        beans += sc.nextInt();\n\n        System.out.println(\"\
    Write how many disposable cups of coffee do you want to add:\");\n        cups\
    \ += sc.nextInt();\n\n        sc.nextLine();\n\n        System.out.println();\n\
    \    }\n\n    public static void take() {\n\n        System.out.println(\"I gave\
    \ you $\" + money);\n        money = 0;\n        System.out.println();\n    }\n\
    \n    public static void printMachineState() {\n\n        System.out.println(\"\
    \\nThe coffee machine has:\");\n        System.out.println(water + \" of water\"\
    );\n        System.out.println(milk + \" of milk\");\n        System.out.println(beans\
    \ + \" of coffee beans\");\n        System.out.println(cups + \" of disposable\
    \ cups\");\n        System.out.println(\"$\" + money + \" of money\\n\");\n  \
    \  }\n}\n"
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        700 - 400,
                        390 - 540,
                        80 - 120 ,
                        7 - 9,
                        0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "buy\n" +
                            "2\n" +
                            "fill\n" +
                            "1000\n" +
                            "0\n" +
                            "0\n" +
                            "0\n" +
                            "buy\n" +
                            "2\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        3000,
                        3000,
                        3000 ,
                        3000,
                        0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                            "fill\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "3000\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -250,
                        0,
                        -16 ,
                        -1,
                        4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "1\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -350,
                        -75,
                        -20 ,
                        -1,
                        7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "2\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        -200,
                        -100,
                        -12 ,
                        -1,
                        6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "3\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                            "take\n" +
                            "remaining\n" +
                            "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        0,
                        0,
                        0 ,
                        0,
                        0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                            "buy\n" +
                            "back\n" +
                            "remaining\n" +
                            "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                    diffMilk == milk_ &&
                    diffBeans == beans_ &&
                    diffCups == cups_ &&
                    diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/33/stages/180/implement#comment
status: Solved
record: 5
