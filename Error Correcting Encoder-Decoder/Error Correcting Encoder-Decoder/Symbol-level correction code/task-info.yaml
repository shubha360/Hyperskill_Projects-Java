type: edu
custom_name: stage2
files:
- name: src/correcter/Main.java
  visible: true
  text: |
    package correcter;

    import java.util.Random;

    public class Main {
        public static void main(String[] args) {

            java.util.Scanner scanner = new java.util.Scanner(System.in);

            StringBuilder input = new StringBuilder(scanner.nextLine());

            input = sendOverPoorConnection(input);
            System.out.println(input);
        }

        static StringBuilder sendOverPoorConnection(StringBuilder input) {

            Random random = new Random();
            int i = 0;

            while (i < input.length()) {

                int j = random.nextInt(3);

                if (i + j > input.length()) {
                    break;
                }

                int characterIndex = random.nextInt(63);

                input.replace(i + j, i + j + 1, String.valueOf(characterGenerator(characterIndex)));
                i += 3;
            }
            return input;
        }

        static StringBuilder encode(StringBuilder input) {

            StringBuilder encodedMessage = new StringBuilder(input.length() * 3);

            for (int i = 0; i < input.length(); i++) {
                for (int j = 0; j < 3; j++) {
                    encodedMessage.append(input.charAt(i));
                }
            }
            return encodedMessage;
        }

        static StringBuilder decode(StringBuilder input) {

            StringBuilder decodedMessage = new StringBuilder(input.length() / 3);

            for (int i = 0; i < input.length(); i += 3) {

                if (input.charAt(i) == input.charAt(i + 1) || input.charAt(i) == input.charAt(i + 2)) {
                    decodedMessage.append(input.charAt(i));
                } else {
                    decodedMessage.append(input.charAt(i + 1));
                }
            }
            return decodedMessage;
        }

        static char characterGenerator(int index) {

            if (index < 26) {
                return (char) ('A' + index);
            } else if (index < 52) {
                return (char) ('a' + (index - 26));
            } else if (index == 52) {
                return ' ';
            } else {
                return (char) ('0' + (index - 53));
            }
        }
    }
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("Some text to test"),
                new TestClue("send message to user with id #42354"),
                new TestClue("thq")
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            List<String> splitReply = Arrays.asList(reply.strip().split("\\n"));

            if (splitReply.size() != 4) {
                return new CheckResult(false,
                    "Your program should output 4 lines, found: " + splitReply.size());
            }

            String initialLine = splitReply.get(0);
            String stretched = splitReply.get(1);
            String received = splitReply.get(2);
            String decoded = splitReply.get(3);


            if (!initialLine.equals(clue.input)) {
                return new CheckResult(false,
                    "First line of output should be an input reference!");
            }

            if (!stretched.equals(stretchString(initialLine))) {
                return new CheckResult(false,
                    "Text before sending is encoded incorrectly!");
            }

            if (!decoded.equals(initialLine)) {
                return new CheckResult(false,
                    "Decoding result not match required! Make sure the program works correctly!");
            }

            return checkMatches(received, stretched);
        }

        private static String stretchString(String target) {
            char[] resultChars = target.toCharArray();
            char[] result = new char[resultChars.length * 3];
            for (int i = 0; i < result.length; i++) {
                result[i] = resultChars[i / 3];
            }

            return new String(result);
        }

        private CheckResult checkMatches(String userOutput,
                                         String correctOutput) {

            if (userOutput.length() != correctOutput.length()) {
                return new CheckResult(false,
                    "Input length and output length should be the same!\n" +
                        "Input length: " + correctOutput.length() +
                        "Output length: " + userOutput.length());
            }

            for (int i = 0; i < userOutput.length(); i+=3) {

                int from = i;
                int to = Math.min(i+3, userOutput.length());

                String currUserPart = userOutput.substring(from, to);
                String currCorrectPart = correctOutput.substring(from, to);

                if (currUserPart.length() != 3) {
                    break;
                }

                int errors = 0;

                for (int j = 0; j < currUserPart.length(); j++) {
                    if (currUserPart.charAt(j) != currCorrectPart.charAt(j)) {
                        errors++;
                    }
                }

                if (errors != 1) {
                    return new CheckResult(false,
                        "One of the triples contain "
                            + errors + " errors, but every triple should always contain 1 error");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/58/stages/313/implement#comment
status: Solved
record: 1
