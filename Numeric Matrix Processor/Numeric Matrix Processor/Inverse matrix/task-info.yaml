type: edu
custom_name: stage6
files:
- name: src/processor/Main.java
  visible: true
  text: |-
    package processor;

    public class Main {

        public static void main(String[] args) {

            MatrixOperationFactory operation = null;

            while (true) {

                printMenu();

                java.util.Scanner sc = new java.util.Scanner(System.in);

                int selection = sc.nextInt();

                switch (selection) {

                    case 1 :
                        operation = MatrixOperationFactory.executeMatrixAddition();
                        break;

                    case 2 :
                        operation = MatrixOperationFactory.executeMatrixScalarMultiplication();
                        break;

                    case 3 :
                        operation = MatrixOperationFactory.executeMatrixMultiplication();
                        break;

                    case 4:
                        operation = MatrixOperationFactory.executeMatrixTranspose();
                        break;

                    case 5:
                        operation = MatrixOperationFactory.executeCalculateDeterminant();
                        break;

                    case 0 :
                        return;

                    default:
                        System.out.println("Invalid choice! Please choose again!");
                        break;
                }
            }
        }

        static void printMenu() {

            System.out.print("1. Add matrices\n" +
                    "2. Multiply matrix by a constant\n" +
                    "3. Multiply matrices\n" +
                    "4. Transpose matrix\n" +
                    "5. Calculate a determinant\n" +
                    "0. Exit\n" +
                    "Your choice: ");
        }
    }

    abstract class MatrixOperationFactory {

        static java.util.Scanner scanner = new java.util.Scanner(System.in);
        boolean isIntegerMatrix = false;

        static MatrixAddition executeMatrixAddition() {
            return new MatrixAddition();
        }

        static MatrixScalarMultiplication executeMatrixScalarMultiplication() {
            return new MatrixScalarMultiplication();
        }

        static MatrixMultiplication executeMatrixMultiplication() {
            return new MatrixMultiplication();
        }

        static MatrixTranspose executeMatrixTranspose() {return new MatrixTranspose();}

        static CalculateDeterminant executeCalculateDeterminant() {return new CalculateDeterminant();}

        void printMatrix(double[][] matrix, int row, int column) {

            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {

                    if (isIntegerMatrix) {
                        System.out.print((int) matrix[i][j] + " ");
                    } else {
                        System.out.print(matrix[i][j] + " ");
                    }
                }
                System.out.println();
            }
        }

        double[][] readDoubleMatrix(int row, int column) {

            if (scanner.hasNextInt()) {
                isIntegerMatrix = true;
            }

            double[][] matrix = new double[row][column];

            for (int i = 0; i < row; i++) {
                for (int j = 0; j < column; j++) {
                    matrix[i][j] = scanner.nextDouble();
                }
            }
            return matrix;
        }
    }

    class MatrixAddition extends MatrixOperationFactory {

        MatrixAddition() {

            System.out.print("Enter size of first matrix: ");

            int firstMatrixRow = scanner.nextInt();
            int firstMatrixColumn = scanner.nextInt();

            System.out.println("Enter first matrix: ");
            double[][] firstMatrix = readDoubleMatrix(firstMatrixRow, firstMatrixColumn);

            System.out.print("Enter size of second matrix: ");

            int secondMatrixRow = scanner.nextInt();
            int secondMatrixColumn = scanner.nextInt();

            if (firstMatrixRow != secondMatrixRow || firstMatrixColumn != secondMatrixColumn) {
                System.out.println("Addition cannot be performed on matrices of different size.\n");
                return;
            }

            System.out.println("Enter second matrix: ");
            double[][] secondMatrix = readDoubleMatrix(secondMatrixRow, secondMatrixColumn);

            System.out.println("The result is: ");
            for (int i = 0; i < firstMatrixRow; i++) {
                for (int j = 0; j < firstMatrixColumn; j++) {

                    if (isIntegerMatrix) {
                        System.out.print((int) (firstMatrix[i][j] + secondMatrix[i][j]) + " ");
                    } else {
                        System.out.print((firstMatrix[i][j] + secondMatrix[i][j]) + " ");
                    }
                }
                System.out.println();
            }
            System.out.println();
        }
    }

    class MatrixScalarMultiplication extends MatrixOperationFactory {

        MatrixScalarMultiplication() {

            System.out.print("Enter size of matrix : ");

            int row = scanner.nextInt();
            int column = scanner.nextInt();

            double[][] matrix = readDoubleMatrix(row, column);

            System.out.print("Enter constant : ");
            double constant = scanner.nextFloat();

            System.out.println("The result is: ");

            for (int i = 0; i < row; i++) {
                for (int j = 0; j < row; j++) {

                    if (isIntegerMatrix) {
                        System.out.print((int) (matrix[i][j] * constant) + " ");
                    } else {
                        System.out.print((matrix[i][j] * constant) + " ");
                    }
                }
                System.out.println();
            }
            System.out.println();
        }
    }

    class MatrixMultiplication extends MatrixOperationFactory {

        MatrixMultiplication() {

            System.out.print("Enter size of first matrix: ");

            int firstMatrixRow = scanner.nextInt();
            int firstMatrixColumn = scanner.nextInt();

            System.out.println("Enter first matrix: ");
            double[][] firstMatrix = readDoubleMatrix(firstMatrixRow, firstMatrixColumn);

            System.out.print("Enter size of second matrix: ");

            int secondMatrixRow = scanner.nextInt();
            int secondMatrixColumn = scanner.nextInt();

            if (firstMatrixColumn != secondMatrixRow) {
                System.out.println("Number of columns in first matrix and row of second matrix should be same.\n");
                return;
            }

            System.out.println("Enter second matrix: ");
            double[][] secondMatrix = readDoubleMatrix(secondMatrixRow, secondMatrixColumn);

            System.out.println("The result is: ");
            for (int i = 0; i < firstMatrixRow; i++) {
                for (int j = 0; j < secondMatrixColumn; j++) {

                    double temp = 0;
                    for (int k = 0; k < secondMatrixRow; k++) {

                        temp += firstMatrix[i][k] * secondMatrix[k][j];
                    }

                    if (isIntegerMatrix) {
                        System.out.print((int) temp + " ");
                    } else {
                        System.out.print(temp + " ");
                    }
                }
                System.out.println();
            }
            System.out.println();
        }
    }

    class MatrixTranspose extends MatrixOperationFactory {

        MatrixTranspose(){
            System.out.println();
            System.out.println("1. Main diagonal\n" +
                    "2. Side diagonal\n" +
                    "3. Vertical line\n" +
                    "4. Horizontal line");
            System.out.print("Your choice: ");

            int selection = scanner.nextInt();

            System.out.print("Enter matrix size: ");

            int row = scanner.nextInt();
            int column = scanner.nextInt();

            System.out.println("Enter matrix: ");
            double[][] matrix = readDoubleMatrix(row, column);

            double[][] result = null;

            switch (selection) {

                case 1:
                    result = mainDiagonalTranspose(matrix, row, column);

                    int temp = row;
                    row = column;
                    column = row;
                    break;

                case 2:
                    result = sideDiagonalTranspose(matrix, row, column);

                    temp = row;
                    row = column;
                    column = row;
                    break;

                case 3:
                    result = verticalTranspose(matrix, row, column);
                    break;

                case 4:
                    result = horizontalTranspose(matrix, row, column);
                    break;
            }

            System.out.println("The result is:");
            printMatrix(result, row, column);
            System.out.println();
        }

        private double[][] mainDiagonalTranspose(double[][] matrix, int row, int column) {

            double[][] result = new double[column][row];

            for (int i = 0; i < column; i++) {
                for (int j = 0; j < row; j++) {
                    result[i][j] = matrix[j][i];
                }
            }
            return result;
        }

        private double[][] sideDiagonalTranspose(double[][] matrix, int row, int column) {

            double[][] result = new double[column][row];

            for (int i = 0; i < column; i++) {
                for (int j = 0; j < row; j++) {
                    result[i][j] = matrix[row - j - 1][column - i - 1];
                }
            }
            return result;
        }

        double[][] verticalTranspose(double[][] matrix, int row, int column) {

            double[][] result = new double[row][column];

            int i = 0;
            int j = column - 1;

            while (i < j) {
                for (int k = 0; k < row; k++) {
                    result[k][i] = matrix[k][j];
                    result[k][j] = matrix[k][i];
                }
                i++;
                j--;
            }
            if (i == j) {
                for (int k = 0; k < row; k++) {
                    result[k][i] = matrix[k][i];
                }
            }
            return result;
        }

        double[][] horizontalTranspose(double[][] matrix, int row, int column) {

            double[][] result = new double[row][column];

            int i = 0;
            int j = row - 1;

            while (i < j) {
                for (int k = 0; k < column; k++) {
                    result[i][k] = matrix[j][k];
                    result[j][k] = matrix[i][k];
                }
                i++;
                j--;
            }
            if (i == j) {
                for (int k = 0; k < column; k++) {
                    result[i][k] = matrix[i][k];
                }
            }
            return result;
        }
    }

    class CalculateDeterminant extends MatrixOperationFactory {

        CalculateDeterminant() {

            System.out.print("Enter size: ");
            int row = scanner.nextInt();
            int column = scanner.nextInt();

            if (row != column) {
                System.out.println("Error: Size of row and column can't be different.");
                return;
            }

            System.out.println("Enter matrix:");
            double[][] matrix = readDoubleMatrix(row, column);
            double determinant = findDeterminant(matrix, row, column);

            System.out.println("The result is:");

            if (isIntegerMatrix) {
                System.out.println((int) determinant);
            } else {
                System.out.println(determinant);
            }

            System.out.println();
        }

        private double findDeterminant(double[][] matrix, int row, int column) {

            if (row ==  1 && column == 1) {
                return matrix[0][0];
            }

            if (row == 2 && column == 2) {
                return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
            }

            double determinant = 0;

            for (int i = 0; i < column; i++) {

                if (matrix[0][i] == 0) {
                    continue;
                }

                double[][] newMatrix = new double[row - 1][column - 1];

                for (int j = 1, a = 0; j < row; j++, a++) {
                    for (int k = 0, b = 0; k < column; k++, b++) {

                        if (k == i) {
                            b--;
                            continue;
                        }
                        newMatrix[a][b] = matrix[j][k];
                    }
                }
                double temp = (i % 2 == 0) ?
                        matrix[0][i] * findDeterminant(newMatrix, row - 1, column - 1) :
                        (matrix[0][i] * findDeterminant(newMatrix, row - 1, column - 1)) * (-1);

                determinant += temp;
            }
            return determinant;
        }
    }
  learner_created: false
- name: test/NumericMatrixProcessorTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    import static java.lang.Math.abs;


    class TestClue {

        String feedback;
        ArrayList<Double> answers;

        TestClue(String feedback, Double[] answers) {
            this.feedback = feedback;
            this.answers = new ArrayList<>(Arrays.asList(answers));
        }
    }

    public class NumericMatrixProcessorTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            7d, 13d, 132d,
                            17d, 23d, 45d,
                            65d, 57d, 78d
                        }))
                    .setInput(
                        "1\n"+
                            "3 3\n" +
                            "3 4 55\n" +
                            "4 1 1\n" +
                            "9 0 0\n" +
                            "3 3\n" +
                            "4 9 77\n" +
                            "13 22 44\n" +
                            "56 57 78\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices adding algorithm is correct",
                        new Double[]{
                            43.13d, 911.62d, 1311.8d, 136.53d,
                            -4.2d, 141.1d, -1.09d, 1421.6d,
                            230.33d, 114.2d, 100.7d, 990.4d,
                            956.72d, 168.94d, 112.16d, 27.0d
                        }))
                    .setInput(
                        "1\n"+
                            "4 4\n" +
                            "-0.3 677.4 435.2 123.33\n" +
                            "1.3 141.4 0.11 1411.4\n" +
                            "231.33 113.4 99.9 999.9\n" +
                            "1002.22 123.44 55.66 13.3\n" +
                            "4 4\n" +
                            "43.43 234.22 876.6 13.2\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            187d, 3978d, 7548d,
                            7752d, 5831d, 3774d,
                            16949d, 7752d, 7752d
                        }))
                    .setInput(
                        "2\n" +
                            "3 3\n" +
                            "11 234 444\n" +
                            "456 343 222\n" +
                            "997 456 456\n" +
                            "17\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if multiplication matrix on constant algorithm is correct",
                        new Double[]{
                            1123653d, 5933505d, 110927295d, 2365632d,
                            1505049d, 8619594d, 25665531d, 3833274d,
                            1366632d, 2598732d ,37999962d, 58303305d,
                            11068143d, 9781653d ,13666653d ,13443321d
                        }))
                    .setInput(
                        "2\n" +
                            "4 4\n" +
                            "10123 53455 999345 21312\n" +
                            "13559 77654 231221 34534\n" +
                            "12312 23412 342342 525255\n" +
                            "99713 88123 123123 121111\n" +
                            "111\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            45d, 113d, 11d, 266d,
                            84d, 139d, 29d, 229d,
                            45d, 49d, 35d, 100d,
                            15d, 86d, 0d, 281d ,
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "1 2 2 7\n" +
                            "3 3 4 5\n" +
                            "5 0 0 1\n" +
                            "0 1 0 8\n" +
                            "4 4\n" +
                            "9 8 7 13\n" +
                            "15 14 0 1\n" +
                            "3 7 2 3\n" +
                            "0 9 0 35\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            243d, 295d, 78d, 60d,
                            724d, 798d, 2063d, 175d
                        }))
                    .setInput(
                        "3\n" +
                            "2 3\n" +
                            "1 0 17\n" +
                            "15 19 7\n" +
                            "3 4\n" +
                            "5 6 78 9\n" +
                            "29 31 47 1\n" +
                            "14 17 0 3\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if matrices multiplication algorithm is correct",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if you can do more than one operation in a loop",
                        new Double[]{
                            -3728.685d, 3752.621d, 4367.396d, 1074.785d,
                            246.11d, -228.39d, -396.2d, 29.71d,
                            73.32d, -67.679d, -87.43, 25.04d,
                            -39.22d, 42.02d, 55.6d, -119.42d,
                            100d, 105d,
                            130d, 43d,
                            48d, 53d
                        }))
                    .setInput(
                        "3\n" +
                            "4 4\n" +
                            "0.65 0.67 76.4 23.2\n" +
                            "-0.7 -13.1 -7.2 9.2\n" +
                            "-0.7 -5.5 -1.5 0.4\n" +
                            "-1.0 12.6 0.8 -0.4\n" +
                            "4 4\n" +
                            "-5.5 -0.3 -1.2 10.2\n" +
                            "-1.0 0.8 0.8 -9.5\n" +
                            "-45.5 45.5 56.5 13.7\n" +
                            "-10.7 11.9 2.2 1.2\n" +
                            "3\n" +
                            "3 5\n" +
                            "1 4 5 6 6\n" +
                            "7 8 9 0 0\n" +
                            "4 1 2 2 2\n" +
                            "5 2\n" +
                            "4 5\n" +
                            "6 1\n" +
                            "6 0\n" +
                            "0 9\n" +
                            "7 7\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 2 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "1\n" +
                            "3 3\n" +
                            "1 7 7\n" +
                            "6 6 4\n" +
                            "4 5 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 2d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 2 4\n" +
                            "4 6 6\n" +
                            "7 7 1\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if diagonal transposition algorithm is correct",
                        new Double[]{
                            1d, 6d, 4d,
                            7d, 6d, 5d,
                            7d, 4d, 1d,
                        }))
                    .setInput(
                        "4\n" +
                            "2\n" +
                            "3 3\n" +
                            "1 5 4\n" +
                            "4 6 6\n" +
                            "7 7 1.0\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "3\n" +
                            "4 4\n" +
                            "6 5 4 2\n" +
                            "8 7 6 6\n" +
                            "1 0 0 5.0\n" +
                            "9 2 8 8\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if transposition algorithm is correct",
                        new Double[]{
                            2d, 4d, 5d, 6d,
                            6d, 6d, 7d, 8d,
                            5d, 0d, 0d, 1d,
                            8d, 8d, 2d, 9d
                        }))
                    .setInput(
                        "4\n" +
                            "4\n" +
                            "4 4\n" +
                            "8 8 2 9\n" +
                            "5 0 0 1\n" +
                            "6 6 7 8.0\n" +
                            "2 4 5 6\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            31d
                        }))
                    .setInput(
                        "5\n" +
                            "3 3\n" +
                            "1 2 3\n" +
                            "4 5 7\n" +
                            "10 22 23\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if determinant algorithm is correct",
                        new Double[]{
                            45.2197d
                        }))
                    .setInput(
                        "5\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            1.14717, 2.03717, 2.9711,
                            2.19055, 4.52055, 7.20788,
                            3.67009, 0.590087, 1.33819
                        }))
                    .setInput(
                        "6\n" +
                            "3 3\n" +
                            "0.396796 -0.214938 0.276735\n" +
                            "5.19655 -2.06983 -0.388886\n" +
                            "-3.3797 1.50219 0.159794\n" +
                            "0"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                        "Checking if inversion algorithm is correct",
                        new Double[]{
                            0.396796, -0.214938, 0.276735, -0.5092,
                            5.19655, -2.06983, -0.388886, -3.14252,
                            -3.3797, 1.50219, 0.159794, 2.04842,
                            -0.593332, 0.230065, 0.00259267, 0.50345
                        }))
                    .setInput(
                        "6\n" +
                            "4 4\n" +
                            "2.65 3.54 3.88 8.99\n" +
                            "3.12 5.45 7.77 5.56\n" +
                            "5.31 2.23 2.33 9.81\n" +
                            "1.67 1.67 1.01 9.99\n" +
                            "0")
            );
        }


        @Override
        public CheckResult check(String reply, TestClue clue) {

            try {

                String[] strNumbers = reply.lines()
                    .filter(line -> {
                        line = line.strip();
                        if (line.length() == 0) {
                            return false;
                        }
                        for (char c : line.toCharArray()) {
                            if (!(c == ' ' ||
                                c >= '0' && c <= '9' ||
                                c == '.' ||
                                c == '-' || c == '+' ||
                                c == 'e' || c == 'E')) {
                                return false;
                            }
                        }
                        return true;
                    }).reduce("", (a, b) -> a + " " + b)
                    .strip().split("\\s+");

                double[] actual = Arrays.stream(strNumbers).mapToDouble(Double::parseDouble).toArray();

                double[] expected =
                    clue.answers.stream()
                        .mapToDouble(e -> e)
                        .toArray();
                if (actual.length != expected.length) {
                    return new CheckResult(false, clue.feedback);
                }

                for (int i = 0; i < actual.length; i++) {
                    if (abs(actual[i] - expected[i]) > 0.01) {
                        return new CheckResult(false, clue.feedback);
                    }
                }
            }
            catch (Exception ex) {
                return new CheckResult(false, "Can't check the answer");
            }

            return CheckResult.correct();

        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/60/stages/328/implement#comment
status: Solved
record: 1
