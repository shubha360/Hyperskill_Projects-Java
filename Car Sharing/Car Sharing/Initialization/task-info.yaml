type: edu
files:
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.util.HashMap;

    public class DatabaseUtil {

        private static Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                System.out.println(ignored.getErrorCode());
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the 'COMPANY' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in 'COMPANY' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = -1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            if (!program.isFinished()) {
                return CheckResult.wrong("After running the program, it should create the database file" +
                    " in the carsharing/db/ folder, initialize the table described above, and stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test1_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            if (!program.isFinished()) {
                return CheckResult.wrong("After starting your program should initialize the database, create table named 'company' and stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "Note that .mv.db extension will be added automatically to the database file name.");
            }

            return correct();
        }

        @DynamicTest
        public CheckResult test2_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest
        public CheckResult test3_checkIfTableExists() {
            if (!db.ifTableExist("COMPANY")) {
                return wrong("Can't find table named 'COMPANY'");
            }
            return correct();
        }

        @DynamicTest
        public CheckResult test4_checkTableColumns() {
            String[][] columns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("COMPANY", columns);
            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/140/stages/758/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 21 May 2021 05:33:12 UTC
record: 1
